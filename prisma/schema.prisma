generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model candles {
  id     String   @id
  ticker String
  date   DateTime
  open   Float
  close  Float
  high   Float
  low    Float
  volume BigInt

  @@index([date], map: "idx_candles_date")
  @@index([ticker], map: "idx_candles_ticker")
}

model Watchlist {
  id      String  @id @default(cuid())
  name    String
  userId  String
  tickers  WatchlistTicker[]
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model WatchlistTicker {
  id          String    @id @default(cuid())
  watchlistId String  
  ticker      String
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([ticker, watchlistId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  watchlist     Watchlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
